package com.scrippsnetworks.adsales.videoad.controls {	import com.scrippsnetworks.adsales.videoad.events.VideoViewEvent;	import com.scrippsnetworks.adsales.videoad.vo.VideoVO;	import flash.display.MovieClip;	import flash.events.AsyncErrorEvent;	import flash.events.IOErrorEvent;	import flash.events.NetStatusEvent;	import flash.media.SoundTransform;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	/**	 * @author Tim McLeod	 */	public class VideoView extends MovieClip 	{		public var video:Video;		private var _debug:Boolean = false;		private var _currentVideoVO:VideoVO;		private var _bufferTime:Number = 3;		private var _totalTime:Number = 0;		private var _totalBytes:Number = 0;		private var _volume:Number = 1;		private var _muted:Boolean = false;		private var _paused:Boolean = false;		private var _atEnd:Boolean = false;		private var _nc:NetConnection;		private var _ns:NetStream;		private var _nsPreview:NetStream;		private var _showingPreviewFrame:Boolean = false;		private var _st:SoundTransform;		public function VideoView()		{			_st = new SoundTransform(_volume);		}		///////////////////////////		// Public Methods		///////////////////////////		public function showPreviewFrame():void		{			if(_currentVideoVO != null && _currentVideoVO.stopFrameTime >= 0)			{				// Show Preview Frame				if(_nsPreview != null) _nsPreview.close();								_nsPreview = new NetStream(_nc);				_nsPreview.client = {};				_nsPreview.soundTransform = new SoundTransform(0);				_nsPreview.play(_currentVideoVO.name, _currentVideoVO.stopFrameTime, 0);								if(_debug) trace("Show Preview Frame at (" + _currentVideoVO.stopFrameTime + ") seconds");								video.clear();				video.attachNetStream(_nsPreview);								_showingPreviewFrame = true;			}			else			{				if(_debug) trace("Preview Frame Disabled (stopFrameTime=" + _currentVideoVO.stopFrameTime + ")");			}		}		public function playVideo(vo:VideoVO):void		{			_currentVideoVO = vo;						if(_currentVideoVO != null)			{				if(_nc != null)				{					_nc.close();					_nc.removeEventListener(NetStatusEvent.NET_STATUS, onNetConnectionStatus);					_nc.removeEventListener(AsyncErrorEvent.ASYNC_ERROR, onNetConnectionAsyncError);					_nc.removeEventListener(IOErrorEvent.IO_ERROR, onNetConnectionIOError);										_nc = null;				}								if(_ns != null)				{					_ns.close();					_ns.removeEventListener(AsyncErrorEvent.ASYNC_ERROR, onNetStreamAsyncError);					_ns.removeEventListener(NetStatusEvent.NET_STATUS, onNetStreamStatus);					_ns.removeEventListener(IOErrorEvent.IO_ERROR, onNetStreamIOError);										_ns = null;				}								_nc = new NetConnection();				_nc.client = this;				_nc.addEventListener(NetStatusEvent.NET_STATUS, onNetConnectionStatus, false, 0, true);				_nc.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onNetConnectionAsyncError, false, 0, true);				_nc.addEventListener(IOErrorEvent.IO_ERROR, onNetConnectionIOError, false, 0, true);				_nc.connect(_currentVideoVO.path);								paused = false;				atEnd = false;				_showingPreviewFrame = false;			}		}		public function rewind():void		{			if(hasStream)			{				_ns.seek(0);								if(_paused || _atEnd)				{					paused = false;					atEnd = false;										if(_showingPreviewFrame)					{						video.clear();						video.attachNetStream(_ns);					}										_ns.resume();				}			}		}		public function resume():void		{			if(hasStream) 			{				if(_atEnd)				{					_ns.seek(0);				}								if(_paused || _atEnd)				{					paused = false;					atEnd = false;										if(_showingPreviewFrame)					{						video.clear();						video.attachNetStream(_ns);					}										_ns.resume();				}			}		}		public function togglePause():void		{			if(!_atEnd)			{				paused = !_paused;			}		}		public function toggleMute():void		{			muted = !_muted;		}		public function setSeekPercent(percent:Number):void		{			if(hasStream) 			{				if(percent < 0) percent = 0;				else if(percent > 1) percent = 1;								var seekTo:Number = percent * _totalTime;								if(_showingPreviewFrame)				{					video.clear();					video.attachNetStream(_ns);				}								_ns.seek(seekTo);								paused = false;				atEnd = false;			}		}		///////////////////////////		// Getters/Setters		///////////////////////////		public function get debug():Boolean 		{			return _debug;		}		public function set debug(value:Boolean):void 		{			_debug = value;		}		public function get bufferTime():Number 		{			return _bufferTime;		}		public function set bufferTime(value:Number):void 		{			_bufferTime = value;		}		public function get volume():Number 		{			return _volume;		}		public function set volume(value:Number):void 		{			_volume = value;			_st.volume = value;						if(hasStream) _ns.soundTransform = _st;						dispatchEvent(new VideoViewEvent(VideoViewEvent.VOLUME_CHANGED));		}		public function get muted():Boolean		{			return _muted;		}		public function set muted(value:Boolean):void 		{			_muted = value;						if(_muted)			{				_st.volume = 0;			}			else			{				_st.volume = volume;			}							if(hasStream) _ns.soundTransform = _st;						dispatchEvent(new VideoViewEvent(VideoViewEvent.MUTED_CHANGED));		}		public function get paused():Boolean		{			return _paused;		}		public function set paused(value:Boolean):void 		{			_paused = value;						if(hasStream)			{				if(_paused)				{					_ns.pause();				}				else				{					if(_showingPreviewFrame)					{						video.clear();						video.attachNetStream(_ns);					}										_ns.resume();				}			}						dispatchEvent(new VideoViewEvent(VideoViewEvent.PAUSED_CHANGED));		}		public function get atEnd():Boolean 		{			return _atEnd;		}		public function set atEnd(value:Boolean):void 		{			_atEnd = value;						dispatchEvent(new VideoViewEvent(VideoViewEvent.AT_END_CHANGED));		}		// READ-ONLY		public function get hasStream():Boolean 		{			return (_ns != null);		}		public function get hasPreviewStream():Boolean 		{			return (_nsPreview != null);		}		public function get time():Number		{			if(hasStream) return _ns.time;			return 0;		}		public function get bufferLength():Number		{			if(hasStream) return _ns.bufferLength;			return 0;		}		public function get totalTime():Number		{			return _totalTime;		}		public function get currentVideoVO():VideoVO		{			return _currentVideoVO;		}		public function get percentLoaded():Number		{			var result:Number = 0;			try			{				if(hasStream) result = _ns.info.byteCount / _totalBytes;				if(result > 1) result = 1;			}			catch(error:Error) 			{			}						return result;		}		///////////////////////////		// Event Handlers		///////////////////////////		protected function onNetConnectionStatus(event:NetStatusEvent):void		{			if(_debug) trace(event.info["code"]);						if(event.info["code"] == "NetConnection.Connect.Success")			{				if(_muted) _st.volume = 0;								_ns = new NetStream(_nc);				_ns.client = this;				_ns.bufferTime = _bufferTime;				_ns.soundTransform = _st;				_ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onNetStreamAsyncError, false, 0, true);				_ns.addEventListener(NetStatusEvent.NET_STATUS, onNetStreamStatus, false, 0, true);				_ns.addEventListener(IOErrorEvent.IO_ERROR, onNetStreamIOError, false, 0, true);				_ns.play(_currentVideoVO.name, 0, -1);								video.clear();				video.attachNetStream(_ns);								_showingPreviewFrame = false;			}		}		protected function onNetConnectionAsyncError(event:AsyncErrorEvent):void		{			if(_debug) trace(event);		}		protected function onNetConnectionIOError(event:IOErrorEvent):void		{			if(_debug) trace(event);		}		protected function onNetStreamStatus(event:NetStatusEvent):void		{			if(_debug) trace(event.info["code"]);						dispatchEvent(event);		}		protected function onNetStreamAsyncError(event:AsyncErrorEvent):void		{			if(_debug) trace(event);		}		protected function onNetStreamIOError(event:IOErrorEvent):void		{			if(_debug) trace(event);		}		///////////////////////////		// NetStream Callbacks		///////////////////////////		public function onPlayStatus(info:Object):void 		{			if(info["code"] == "NetStream.Play.Complete")			{				atEnd = true;			}		}		public function onCuePoint(info:Object):void 		{		}		public function onTextData(info:Object):void 		{		}		public function onImageData(info:Object):void 		{		}		public function onMetaData(info:Object):void		{			if(_debug) 			{				trace("Metadata (" + _currentVideoVO.key + "):");				for(var str:String in info)				{					trace("-> " + str + " : " + info[str]);				}			}						_totalTime = info["duration"];			_totalBytes = info["filesize"];		}		///////////////////////////		// NetConnection Callbacks		///////////////////////////		public function onBWDone():void 		{		}	}}